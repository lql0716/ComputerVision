#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Apr 05 22:23:30 2017

@author: lql07
"""

import numpy as np
from numpy import linalg as la

#测试数据集
def loadExData():
    return np.mat([[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 5],
                [0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 3],
                [0, 0, 0, 0, 4, 0, 0, 1, 0, 4, 0],
                [3, 3, 4, 0, 0, 0, 0, 2, 2, 0, 0],
                [5, 4, 5, 0, 0, 0, 0, 5, 5, 0, 0],
                [0, 0, 0, 0, 5, 0, 1, 0, 0, 5, 0],
                [4, 3, 4, 0, 0, 0, 0, 5, 5, 0, 1],
                [0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 4],
                [0, 0, 0, 2, 0, 2, 5, 0, 0, 1, 2],
                [0, 0, 0, 0, 5, 0, 0, 0, 0, 4, 0],
                [1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0] ])

#inA, inB为列向量

#范式距离
def ecludSim(inA, inB):
    return 1.0 / (1.0 + la.norm(inA - inB))

#皮尔逊相关系数    
def pearsSim(inA, inB):
    if len(inA) < 3 :
        return 1.0
    return 0.5 + 0.5 * np.corrcoef(inA, inB, rowvar=0)[0][1]  #rowvar=0表示对列求相似度
    #0.5+0.5*np.corrcoef()是为了将范围归一化到0-1

#余弦相似度
def cosSim(inA, inB):
    num = float(inA.T * inB)
    denom = la.norm(inA) * la.norm(inB)
    return 0.5 + 0.5 * (num / denom)

#按照前k个奇异值的平方和占总奇异值的平方和的百分比percentage来确定k的 值，后续计算
#SVD时需要将原始矩阵转换到k维空间   
def sigmaPct(sigma, percentage):
    sigma2 = sigma * 2  #求平方
    sumsgm2 = sum( sigma2 )  #求所有奇异值的平方和
    sumsgm3 = 0  #前k个奇异值的平方和
    k = 0
    for i in sigma:
        sumsgm3 += i**2
        k+=1
        if sumsgm3 >= sumsgm2 * percentage:  #如果前k个奇异值的和超过总和的percentage倍，则停止循环，并返回k
            return k

#参数：dataMat为数据集，user为用户编号，simMeas为距离的度量方法，item为物品编号，percentage为奇异值的比例
#数据集的一行对应一个用户，一列对应一个物品，该函数基于item的相似性对用户未评过分的物品进行预测评分            
def svdEst(dataMat, user, simMeas, item, percentage):
    n = np.shape(dataMat)[1]  #列数
    simTotal = 0.0
    ratSimTotal = 0.0
    u, sigma, vt = la.svd(dataMat)  #svd分解
    k = sigmaPct(sigma, percentage)  #确定k值
    sigmaK = np.mat(np.eye(k) * sigma[:k])  #np.eye()生成对角阵
    xformedItems = dataMat.T * u[:, :k] * sigmaK.I

    for j in range(n):
        userRating = dataMat[user, j]
        if userRating == 0 or j == item:
            continue
        similarity = simMeas(xformedItems[item, :].T, xformedItems[j, :].T)  #度量相似度
        simTotal += similarity  #对所有相似度求和
        ratSimTotal += similarity * userRating #用“物品item和物品j的相似度 * 用户对物品j的评分，并求和
    if simTotal == 0:
        return 0
    else:
        return ratSimTotal / simTotal  #得到对物品item的预测评分

#该函数产生评分最高的N个推荐结果，默认返回5个        
def recommend(dataMat, user, N = 5, simMeas = cosSim, estMethod = svdEst, percentage = 0.9):
    unratedItems = np.nonzero(dataMat[user,:].A == 0)[1]
    if len(unratedItems) == 0:
        return 'you rated everything'
    itemScores = []
    for item in unratedItems:
        estimatedScore = estMethod(dataMat, user, simMeas, item, percentage)
        itemScores.append((item, estimatedScore))
    itemScores = sorted(itemScores, key = lambda x:x[1], reverse = True)  #按照item的得分从大到小排序
    return itemScores[:N]  #返回前N个预测值

testdata = loadExData()
itemScore = recommend(testdata, 1, N = 3, percentage = 0.8)